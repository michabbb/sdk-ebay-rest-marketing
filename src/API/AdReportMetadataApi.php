<?php
/**
 * AdReportMetadataApi
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API
 *
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.22.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\marketing\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use macropage\SDKs\ebay\rest\marketing\ApiException;
use macropage\SDKs\ebay\rest\marketing\Configuration;
use macropage\SDKs\ebay\rest\marketing\HeaderSelector;
use macropage\SDKs\ebay\rest\marketing\ObjectSerializer;

/**
 * AdReportMetadataApi Class Doc Comment
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdReportMetadataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getReportMetadata' => [
            'application/json',
        ],
        'getReportMetadataForReportType' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getReportMetadata
     *
     * @param  string|null $fundingModel This query parameter is used only if the user wants to see report metadata for a specific funding model. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel This query parameter is used only if the user wants to see COST_PER_CLICK report metadata for a specific channel. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadata'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas
     */
    public function getReportMetadata($fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadata'][0])
    {
        list($response) = $this->getReportMetadataWithHttpInfo($fundingModel, $channel, $contentType);
        return $response;
    }

    /**
     * Operation getReportMetadataWithHttpInfo
     *
     * @param  string|null $fundingModel This query parameter is used only if the user wants to see report metadata for a specific funding model. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel This query parameter is used only if the user wants to see COST_PER_CLICK report metadata for a specific channel. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadata'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportMetadataWithHttpInfo($fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadata'][0])
    {
        $request = $this->getReportMetadataRequest($fundingModel, $channel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportMetadataAsync
     *
     * @param  string|null $fundingModel This query parameter is used only if the user wants to see report metadata for a specific funding model. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel This query parameter is used only if the user wants to see COST_PER_CLICK report metadata for a specific channel. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportMetadataAsync($fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadata'][0])
    {
        return $this->getReportMetadataAsyncWithHttpInfo($fundingModel, $channel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportMetadataAsyncWithHttpInfo
     *
     * @param  string|null $fundingModel This query parameter is used only if the user wants to see report metadata for a specific funding model. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel This query parameter is used only if the user wants to see COST_PER_CLICK report metadata for a specific channel. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportMetadataAsyncWithHttpInfo($fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadata'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadatas';
        $request = $this->getReportMetadataRequest($fundingModel, $channel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportMetadata'
     *
     * @param  string|null $fundingModel This query parameter is used only if the user wants to see report metadata for a specific funding model. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel This query parameter is used only if the user wants to see COST_PER_CLICK report metadata for a specific channel. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReportMetadataRequest($fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadata'][0])
    {




        $resourcePath = '/ad_report_metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fundingModel,
            'funding_model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportMetadataForReportType
     *
     * @param  string $reportType This path parameter specifies the name of the report type whose metadata you want to retrieve.&lt;br /&gt;&lt;br /&gt;For details about available report types and their descriptions, refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/plr:ReportTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ReportTypeEnum&lt;/a&gt;. (required)
     * @param  string|null $fundingModel The funding model used in the report. The funding model must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel The channel used in the report. The channel must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadataForReportType'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata
     */
    public function getReportMetadataForReportType($reportType, $fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadataForReportType'][0])
    {
        list($response) = $this->getReportMetadataForReportTypeWithHttpInfo($reportType, $fundingModel, $channel, $contentType);
        return $response;
    }

    /**
     * Operation getReportMetadataForReportTypeWithHttpInfo
     *
     * @param  string $reportType This path parameter specifies the name of the report type whose metadata you want to retrieve.&lt;br /&gt;&lt;br /&gt;For details about available report types and their descriptions, refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/plr:ReportTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ReportTypeEnum&lt;/a&gt;. (required)
     * @param  string|null $fundingModel The funding model used in the report. The funding model must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel The channel used in the report. The channel must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadataForReportType'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportMetadataForReportTypeWithHttpInfo($reportType, $fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadataForReportType'][0])
    {
        $request = $this->getReportMetadataForReportTypeRequest($reportType, $fundingModel, $channel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportMetadataForReportTypeAsync
     *
     * @param  string $reportType This path parameter specifies the name of the report type whose metadata you want to retrieve.&lt;br /&gt;&lt;br /&gt;For details about available report types and their descriptions, refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/plr:ReportTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ReportTypeEnum&lt;/a&gt;. (required)
     * @param  string|null $fundingModel The funding model used in the report. The funding model must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel The channel used in the report. The channel must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadataForReportType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportMetadataForReportTypeAsync($reportType, $fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadataForReportType'][0])
    {
        return $this->getReportMetadataForReportTypeAsyncWithHttpInfo($reportType, $fundingModel, $channel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportMetadataForReportTypeAsyncWithHttpInfo
     *
     * @param  string $reportType This path parameter specifies the name of the report type whose metadata you want to retrieve.&lt;br /&gt;&lt;br /&gt;For details about available report types and their descriptions, refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/plr:ReportTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ReportTypeEnum&lt;/a&gt;. (required)
     * @param  string|null $fundingModel The funding model used in the report. The funding model must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel The channel used in the report. The channel must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadataForReportType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportMetadataForReportTypeAsyncWithHttpInfo($reportType, $fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadataForReportType'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\ReportMetadata';
        $request = $this->getReportMetadataForReportTypeRequest($reportType, $fundingModel, $channel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportMetadataForReportType'
     *
     * @param  string $reportType This path parameter specifies the name of the report type whose metadata you want to retrieve.&lt;br /&gt;&lt;br /&gt;For details about available report types and their descriptions, refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/plr:ReportTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ReportTypeEnum&lt;/a&gt;. (required)
     * @param  string|null $fundingModel The funding model used in the report. The funding model must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:FundingModelEnum\&quot;&gt;FundingModelEnum&lt;/a&gt; type for supported values. (optional)
     * @param  string|null $channel The channel used in the report. The channel must be compatible with the report type specified in the path parameter. Refer to the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:ChannelEnum\&quot;&gt;ChannelEnum&lt;/a&gt; type for supported values. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The channel parameter is only applicable for COST_PER_CLICK funding model.&lt;/span&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportMetadataForReportType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReportMetadataForReportTypeRequest($reportType, $fundingModel = null, $channel = null, string $contentType = self::contentTypes['getReportMetadataForReportType'][0])
    {

        // verify the required parameter 'reportType' is set
        if ($reportType === null || (is_array($reportType) && count($reportType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportType when calling getReportMetadataForReportType'
            );
        }




        $resourcePath = '/ad_report_metadata/{report_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fundingModel,
            'funding_model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($reportType !== null) {
            $resourcePath = str_replace(
                '{' . 'report_type' . '}',
                ObjectSerializer::toPathValue($reportType),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
