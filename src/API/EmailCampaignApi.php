<?php
/**
 * EmailCampaignApi
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API
 *
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.21.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\marketing\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use macropage\SDKs\ebay\rest\marketing\ApiException;
use macropage\SDKs\ebay\rest\marketing\Configuration;
use macropage\SDKs\ebay\rest\marketing\HeaderSelector;
use macropage\SDKs\ebay\rest\marketing\ObjectSerializer;

/**
 * EmailCampaignApi Class Doc Comment
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailCampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createEmailCampaign' => [
            'application/json',
        ],
        'deleteEmailCampaign' => [
            'application/json',
        ],
        'getAudiences' => [
            'application/json',
        ],
        'getEmailCampaign' => [
            'application/json',
        ],
        'getEmailCampaigns' => [
            'application/json',
        ],
        'getEmailPreview' => [
            'application/json',
        ],
        'getEmailReport' => [
            'application/json',
        ],
        'updateEmailCampaign' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEmailCampaign
     *
     * @param  string $xEBAYCMARKETPLACEID The eBay marketplace that the email campaign interfaces with.&lt;br&gt;&lt;br&gt;eBay marketplaces correspond to geographical regions or large submarkets of regions. For example, &lt;code&gt;EBAY-US&lt;/code&gt; corresponds to the United States market.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;MarketplaceIdEnum&lt;/a&gt; for supported values. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignRequest $createEmailCampaignRequest Create a new email campaign request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse
     */
    public function createEmailCampaign($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        list($response) = $this->createEmailCampaignWithHttpInfo($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, $contentType);
        return $response;
    }

    /**
     * Operation createEmailCampaignWithHttpInfo
     *
     * @param  string $xEBAYCMARKETPLACEID The eBay marketplace that the email campaign interfaces with.&lt;br&gt;&lt;br&gt;eBay marketplaces correspond to geographical regions or large submarkets of regions. For example, &lt;code&gt;EBAY-US&lt;/code&gt; corresponds to the United States market.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;MarketplaceIdEnum&lt;/a&gt; for supported values. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignRequest $createEmailCampaignRequest Create a new email campaign request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailCampaignWithHttpInfo($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        $request = $this->createEmailCampaignRequest($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailCampaignAsync
     *
     * @param  string $xEBAYCMARKETPLACEID The eBay marketplace that the email campaign interfaces with.&lt;br&gt;&lt;br&gt;eBay marketplaces correspond to geographical regions or large submarkets of regions. For example, &lt;code&gt;EBAY-US&lt;/code&gt; corresponds to the United States market.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;MarketplaceIdEnum&lt;/a&gt; for supported values. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignRequest $createEmailCampaignRequest Create a new email campaign request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailCampaignAsync($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        return $this->createEmailCampaignAsyncWithHttpInfo($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailCampaignAsyncWithHttpInfo
     *
     * @param  string $xEBAYCMARKETPLACEID The eBay marketplace that the email campaign interfaces with.&lt;br&gt;&lt;br&gt;eBay marketplaces correspond to geographical regions or large submarkets of regions. For example, &lt;code&gt;EBAY-US&lt;/code&gt; corresponds to the United States market.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;MarketplaceIdEnum&lt;/a&gt; for supported values. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignRequest $createEmailCampaignRequest Create a new email campaign request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailCampaignAsyncWithHttpInfo($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignResponse';
        $request = $this->createEmailCampaignRequest($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailCampaign'
     *
     * @param  string $xEBAYCMARKETPLACEID The eBay marketplace that the email campaign interfaces with.&lt;br&gt;&lt;br&gt;eBay marketplaces correspond to geographical regions or large submarkets of regions. For example, &lt;code&gt;EBAY-US&lt;/code&gt; corresponds to the United States market.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;MarketplaceIdEnum&lt;/a&gt; for supported values. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateEmailCampaignRequest $createEmailCampaignRequest Create a new email campaign request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailCampaignRequest($xEBAYCMARKETPLACEID, $contentType, $createEmailCampaignRequest, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {

        // verify the required parameter 'xEBAYCMARKETPLACEID' is set
        if ($xEBAYCMARKETPLACEID === null || (is_array($xEBAYCMARKETPLACEID) && count($xEBAYCMARKETPLACEID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEBAYCMARKETPLACEID when calling createEmailCampaign'
            );
        }

        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling createEmailCampaign'
            );
        }

        // verify the required parameter 'createEmailCampaignRequest' is set
        if ($createEmailCampaignRequest === null || (is_array($createEmailCampaignRequest) && count($createEmailCampaignRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createEmailCampaignRequest when calling createEmailCampaign'
            );
        }


        $resourcePath = '/email_campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xEBAYCMARKETPLACEID !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($xEBAYCMARKETPLACEID);
        }
        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createEmailCampaignRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createEmailCampaignRequest));
            } else {
                $httpBody = $createEmailCampaignRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailCampaign
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier for the email campaign being deleted.&lt;br /&gt;&lt;br /&gt; You can retrieve the email campaign IDs for a specified seller using the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/email_campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse
     */
    public function deleteEmailCampaign($emailCampaignId, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        list($response) = $this->deleteEmailCampaignWithHttpInfo($emailCampaignId, $contentType);
        return $response;
    }

    /**
     * Operation deleteEmailCampaignWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier for the email campaign being deleted.&lt;br /&gt;&lt;br /&gt; You can retrieve the email campaign IDs for a specified seller using the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/email_campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailCampaignWithHttpInfo($emailCampaignId, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        $request = $this->deleteEmailCampaignRequest($emailCampaignId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailCampaignAsync
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier for the email campaign being deleted.&lt;br /&gt;&lt;br /&gt; You can retrieve the email campaign IDs for a specified seller using the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/email_campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCampaignAsync($emailCampaignId, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        return $this->deleteEmailCampaignAsyncWithHttpInfo($emailCampaignId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailCampaignAsyncWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier for the email campaign being deleted.&lt;br /&gt;&lt;br /&gt; You can retrieve the email campaign IDs for a specified seller using the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/email_campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCampaignAsyncWithHttpInfo($emailCampaignId, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\DeleteEmailCampaignResponse';
        $request = $this->deleteEmailCampaignRequest($emailCampaignId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailCampaign'
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier for the email campaign being deleted.&lt;br /&gt;&lt;br /&gt; You can retrieve the email campaign IDs for a specified seller using the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/email_campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmailCampaignRequest($emailCampaignId, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {

        // verify the required parameter 'emailCampaignId' is set
        if ($emailCampaignId === null || (is_array($emailCampaignId) && count($emailCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailCampaignId when calling deleteEmailCampaign'
            );
        }


        $resourcePath = '/email_campaign/{email_campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($emailCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_id' . '}',
                ObjectSerializer::toPathValue($emailCampaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAudiences
     *
     * @param  string $emailCampaignType The email campaign type to search against.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CampaignTypeEnum&lt;/a&gt; for the full list of available email campaign types and associated enum values. (required)
     * @param  string $limit The maximum number of audience groups returned per page in the results set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 100 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than 0.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiences'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse
     */
    public function getAudiences($emailCampaignType, $limit = null, $offset = null, string $contentType = self::contentTypes['getAudiences'][0])
    {
        list($response) = $this->getAudiencesWithHttpInfo($emailCampaignType, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getAudiencesWithHttpInfo
     *
     * @param  string $emailCampaignType The email campaign type to search against.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CampaignTypeEnum&lt;/a&gt; for the full list of available email campaign types and associated enum values. (required)
     * @param  string $limit The maximum number of audience groups returned per page in the results set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 100 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than 0.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiences'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudiencesWithHttpInfo($emailCampaignType, $limit = null, $offset = null, string $contentType = self::contentTypes['getAudiences'][0])
    {
        $request = $this->getAudiencesRequest($emailCampaignType, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudiencesAsync
     *
     * @param  string $emailCampaignType The email campaign type to search against.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CampaignTypeEnum&lt;/a&gt; for the full list of available email campaign types and associated enum values. (required)
     * @param  string $limit The maximum number of audience groups returned per page in the results set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 100 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than 0.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudiencesAsync($emailCampaignType, $limit = null, $offset = null, string $contentType = self::contentTypes['getAudiences'][0])
    {
        return $this->getAudiencesAsyncWithHttpInfo($emailCampaignType, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudiencesAsyncWithHttpInfo
     *
     * @param  string $emailCampaignType The email campaign type to search against.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CampaignTypeEnum&lt;/a&gt; for the full list of available email campaign types and associated enum values. (required)
     * @param  string $limit The maximum number of audience groups returned per page in the results set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 100 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than 0.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudiencesAsyncWithHttpInfo($emailCampaignType, $limit = null, $offset = null, string $contentType = self::contentTypes['getAudiences'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignAudiencesResponse';
        $request = $this->getAudiencesRequest($emailCampaignType, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAudiences'
     *
     * @param  string $emailCampaignType The email campaign type to search against.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CampaignTypeEnum&lt;/a&gt; for the full list of available email campaign types and associated enum values. (required)
     * @param  string $limit The maximum number of audience groups returned per page in the results set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 100 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than 0.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudiencesRequest($emailCampaignType, $limit = null, $offset = null, string $contentType = self::contentTypes['getAudiences'][0])
    {

        // verify the required parameter 'emailCampaignType' is set
        if ($emailCampaignType === null || (is_array($emailCampaignType) && count($emailCampaignType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailCampaignType when calling getAudiences'
            );
        }




        $resourcePath = '/email_campaign/audience';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $emailCampaignType,
            'emailCampaignType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaign
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier of the email campaign being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse
     */
    public function getEmailCampaign($emailCampaignId, string $contentType = self::contentTypes['getEmailCampaign'][0])
    {
        list($response) = $this->getEmailCampaignWithHttpInfo($emailCampaignId, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier of the email campaign being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignWithHttpInfo($emailCampaignId, string $contentType = self::contentTypes['getEmailCampaign'][0])
    {
        $request = $this->getEmailCampaignRequest($emailCampaignId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignAsync
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier of the email campaign being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignAsync($emailCampaignId, string $contentType = self::contentTypes['getEmailCampaign'][0])
    {
        return $this->getEmailCampaignAsyncWithHttpInfo($emailCampaignId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignAsyncWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier of the email campaign being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignAsyncWithHttpInfo($emailCampaignId, string $contentType = self::contentTypes['getEmailCampaign'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignResponse';
        $request = $this->getEmailCampaignRequest($emailCampaignId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaign'
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay-assigned identifier of the email campaign being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignRequest($emailCampaignId, string $contentType = self::contentTypes['getEmailCampaign'][0])
    {

        // verify the required parameter 'emailCampaignId' is set
        if ($emailCampaignId === null || (is_array($emailCampaignId) && count($emailCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailCampaignId when calling getEmailCampaign'
            );
        }


        $resourcePath = '/email_campaign/{email_campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($emailCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_id' . '}',
                ObjectSerializer::toPathValue($emailCampaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaigns
     *
     * @param  string $limit The maximum number of email campaigns returned in a page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than zero.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $q This field contains filter criteria for the results returned. Filter by &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot;&gt;email campaign type&lt;/a&gt;, &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:EmailCampaignStatusEnum\&quot;&gt;email campaign status&lt;/a&gt;, and &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot;&gt;marketplace ID&lt;/a&gt;.&lt;br&gt;&lt;br&gt;For example, setting &lt;code&gt;q&#x3D;campaignType:WELCOME,ITEM_SHOWCASE&lt;/code&gt; will return only Welcome and Item Showcase email campaigns.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; At least one &lt;code&gt;campaignType&lt;/code&gt; value must be set through the &lt;code&gt;q&lt;/code&gt; query parameter. If no other filters are set, all email campaigns for the specified campaign type(s) will be returned in the results set.&lt;/span&gt; (optional)
     * @param  string $sort The criteria for sorting email campaign results. See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:ItemSortEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ItemSortEnum&lt;/a&gt; for sorting options and their enum values.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;NEWLY_LISTED&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse
     */
    public function getEmailCampaigns($limit = null, $offset = null, $q = null, $sort = null, string $contentType = self::contentTypes['getEmailCampaigns'][0])
    {
        list($response) = $this->getEmailCampaignsWithHttpInfo($limit, $offset, $q, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignsWithHttpInfo
     *
     * @param  string $limit The maximum number of email campaigns returned in a page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than zero.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $q This field contains filter criteria for the results returned. Filter by &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot;&gt;email campaign type&lt;/a&gt;, &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:EmailCampaignStatusEnum\&quot;&gt;email campaign status&lt;/a&gt;, and &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot;&gt;marketplace ID&lt;/a&gt;.&lt;br&gt;&lt;br&gt;For example, setting &lt;code&gt;q&#x3D;campaignType:WELCOME,ITEM_SHOWCASE&lt;/code&gt; will return only Welcome and Item Showcase email campaigns.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; At least one &lt;code&gt;campaignType&lt;/code&gt; value must be set through the &lt;code&gt;q&lt;/code&gt; query parameter. If no other filters are set, all email campaigns for the specified campaign type(s) will be returned in the results set.&lt;/span&gt; (optional)
     * @param  string $sort The criteria for sorting email campaign results. See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:ItemSortEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ItemSortEnum&lt;/a&gt; for sorting options and their enum values.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;NEWLY_LISTED&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignsWithHttpInfo($limit = null, $offset = null, $q = null, $sort = null, string $contentType = self::contentTypes['getEmailCampaigns'][0])
    {
        $request = $this->getEmailCampaignsRequest($limit, $offset, $q, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignsAsync
     *
     * @param  string $limit The maximum number of email campaigns returned in a page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than zero.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $q This field contains filter criteria for the results returned. Filter by &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot;&gt;email campaign type&lt;/a&gt;, &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:EmailCampaignStatusEnum\&quot;&gt;email campaign status&lt;/a&gt;, and &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot;&gt;marketplace ID&lt;/a&gt;.&lt;br&gt;&lt;br&gt;For example, setting &lt;code&gt;q&#x3D;campaignType:WELCOME,ITEM_SHOWCASE&lt;/code&gt; will return only Welcome and Item Showcase email campaigns.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; At least one &lt;code&gt;campaignType&lt;/code&gt; value must be set through the &lt;code&gt;q&lt;/code&gt; query parameter. If no other filters are set, all email campaigns for the specified campaign type(s) will be returned in the results set.&lt;/span&gt; (optional)
     * @param  string $sort The criteria for sorting email campaign results. See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:ItemSortEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ItemSortEnum&lt;/a&gt; for sorting options and their enum values.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;NEWLY_LISTED&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignsAsync($limit = null, $offset = null, $q = null, $sort = null, string $contentType = self::contentTypes['getEmailCampaigns'][0])
    {
        return $this->getEmailCampaignsAsyncWithHttpInfo($limit, $offset, $q, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignsAsyncWithHttpInfo
     *
     * @param  string $limit The maximum number of email campaigns returned in a page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than zero.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $q This field contains filter criteria for the results returned. Filter by &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot;&gt;email campaign type&lt;/a&gt;, &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:EmailCampaignStatusEnum\&quot;&gt;email campaign status&lt;/a&gt;, and &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot;&gt;marketplace ID&lt;/a&gt;.&lt;br&gt;&lt;br&gt;For example, setting &lt;code&gt;q&#x3D;campaignType:WELCOME,ITEM_SHOWCASE&lt;/code&gt; will return only Welcome and Item Showcase email campaigns.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; At least one &lt;code&gt;campaignType&lt;/code&gt; value must be set through the &lt;code&gt;q&lt;/code&gt; query parameter. If no other filters are set, all email campaigns for the specified campaign type(s) will be returned in the results set.&lt;/span&gt; (optional)
     * @param  string $sort The criteria for sorting email campaign results. See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:ItemSortEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ItemSortEnum&lt;/a&gt; for sorting options and their enum values.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;NEWLY_LISTED&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignsAsyncWithHttpInfo($limit = null, $offset = null, $q = null, $sort = null, string $contentType = self::contentTypes['getEmailCampaigns'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailCampaignsResponse';
        $request = $this->getEmailCampaignsRequest($limit, $offset, $q, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaigns'
     *
     * @param  string $limit The maximum number of email campaigns returned in a page.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min value&lt;/b&gt;: 1&lt;br&gt;&lt;br&gt;&lt;b&gt;Max value&lt;/b&gt;: 200 (optional)
     * @param  string $offset The number of results to skip in a pagination query. This value cannot be less than zero.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value&lt;/b&gt;: 0 (optional)
     * @param  string $q This field contains filter criteria for the results returned. Filter by &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:CampaignTypeEnum\&quot;&gt;email campaign type&lt;/a&gt;, &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:EmailCampaignStatusEnum\&quot;&gt;email campaign status&lt;/a&gt;, and &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/ba:MarketplaceIdEnum\&quot;&gt;marketplace ID&lt;/a&gt;.&lt;br&gt;&lt;br&gt;For example, setting &lt;code&gt;q&#x3D;campaignType:WELCOME,ITEM_SHOWCASE&lt;/code&gt; will return only Welcome and Item Showcase email campaigns.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; At least one &lt;code&gt;campaignType&lt;/code&gt; value must be set through the &lt;code&gt;q&lt;/code&gt; query parameter. If no other filters are set, all email campaigns for the specified campaign type(s) will be returned in the results set.&lt;/span&gt; (optional)
     * @param  string $sort The criteria for sorting email campaign results. See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/api:ItemSortEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ItemSortEnum&lt;/a&gt; for sorting options and their enum values.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;NEWLY_LISTED&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignsRequest($limit = null, $offset = null, $q = null, $sort = null, string $contentType = self::contentTypes['getEmailCampaigns'][0])
    {






        $resourcePath = '/email_campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailPreview
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign associated with the preview being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailPreview'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse
     */
    public function getEmailPreview($emailCampaignId, string $contentType = self::contentTypes['getEmailPreview'][0])
    {
        list($response) = $this->getEmailPreviewWithHttpInfo($emailCampaignId, $contentType);
        return $response;
    }

    /**
     * Operation getEmailPreviewWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign associated with the preview being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailPreview'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPreviewWithHttpInfo($emailCampaignId, string $contentType = self::contentTypes['getEmailPreview'][0])
    {
        $request = $this->getEmailPreviewRequest($emailCampaignId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailPreviewAsync
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign associated with the preview being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailPreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPreviewAsync($emailCampaignId, string $contentType = self::contentTypes['getEmailPreview'][0])
    {
        return $this->getEmailPreviewAsyncWithHttpInfo($emailCampaignId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailPreviewAsyncWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign associated with the preview being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailPreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPreviewAsyncWithHttpInfo($emailCampaignId, string $contentType = self::contentTypes['getEmailPreview'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailPreviewResponse';
        $request = $this->getEmailPreviewRequest($emailCampaignId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailPreview'
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign associated with the preview being retrieved.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailPreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailPreviewRequest($emailCampaignId, string $contentType = self::contentTypes['getEmailPreview'][0])
    {

        // verify the required parameter 'emailCampaignId' is set
        if ($emailCampaignId === null || (is_array($emailCampaignId) && count($emailCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailCampaignId when calling getEmailPreview'
            );
        }


        $resourcePath = '/email_campaign/{email_campaign_id}/email_preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($emailCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_id' . '}',
                ObjectSerializer::toPathValue($emailCampaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailReport
     *
     * @param  string $endDate The end date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $startDate The start date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailReport'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse
     */
    public function getEmailReport($endDate, $startDate, string $contentType = self::contentTypes['getEmailReport'][0])
    {
        list($response) = $this->getEmailReportWithHttpInfo($endDate, $startDate, $contentType);
        return $response;
    }

    /**
     * Operation getEmailReportWithHttpInfo
     *
     * @param  string $endDate The end date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $startDate The start date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailReport'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailReportWithHttpInfo($endDate, $startDate, string $contentType = self::contentTypes['getEmailReport'][0])
    {
        $request = $this->getEmailReportRequest($endDate, $startDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailReportAsync
     *
     * @param  string $endDate The end date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $startDate The start date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailReportAsync($endDate, $startDate, string $contentType = self::contentTypes['getEmailReport'][0])
    {
        return $this->getEmailReportAsyncWithHttpInfo($endDate, $startDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailReportAsyncWithHttpInfo
     *
     * @param  string $endDate The end date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $startDate The start date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailReportAsyncWithHttpInfo($endDate, $startDate, string $contentType = self::contentTypes['getEmailReport'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\GetEmailReportResponse';
        $request = $this->getEmailReportRequest($endDate, $startDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailReport'
     *
     * @param  string $endDate The end date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $startDate The start date for the report, given in UTC format. The maximum date range for a report retrieved by this method is one year. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailReportRequest($endDate, $startDate, string $contentType = self::contentTypes['getEmailReport'][0])
    {

        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling getEmailReport'
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling getEmailReport'
            );
        }


        $resourcePath = '/email_campaign/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'endDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'startDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailCampaign
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign being updated.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateCampaignRequest $updateCampaignRequest update email campaign request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse
     */
    public function updateEmailCampaign($emailCampaignId, $contentType, $updateCampaignRequest, string $contentType = self::contentTypes['updateEmailCampaign'][0])
    {
        list($response) = $this->updateEmailCampaignWithHttpInfo($emailCampaignId, $contentType, $updateCampaignRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateEmailCampaignWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign being updated.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateCampaignRequest $updateCampaignRequest update email campaign request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaign'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCampaignWithHttpInfo($emailCampaignId, $contentType, $updateCampaignRequest, string $contentType = self::contentTypes['updateEmailCampaign'][0])
    {
        $request = $this->updateEmailCampaignRequest($emailCampaignId, $contentType, $updateCampaignRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailCampaignAsync
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign being updated.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateCampaignRequest $updateCampaignRequest update email campaign request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignAsync($emailCampaignId, $contentType, $updateCampaignRequest, string $contentType = self::contentTypes['updateEmailCampaign'][0])
    {
        return $this->updateEmailCampaignAsyncWithHttpInfo($emailCampaignId, $contentType, $updateCampaignRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailCampaignAsyncWithHttpInfo
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign being updated.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateCampaignRequest $updateCampaignRequest update email campaign request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignAsyncWithHttpInfo($emailCampaignId, $contentType, $updateCampaignRequest, string $contentType = self::contentTypes['updateEmailCampaign'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\UpdateEmailCampaignResponse';
        $request = $this->updateEmailCampaignRequest($emailCampaignId, $contentType, $updateCampaignRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailCampaign'
     *
     * @param  string $emailCampaignId This path parameter specifies the unique eBay assigned identifier for the email campaign being updated.&lt;br&gt;&lt;br&gt;Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getEmailCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getEmailCampaigns&lt;/a&gt; method to retrieve a list of email campaign IDs for a seller. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateCampaignRequest $updateCampaignRequest update email campaign request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailCampaignRequest($emailCampaignId, $contentType, $updateCampaignRequest, string $contentType = self::contentTypes['updateEmailCampaign'][0])
    {

        // verify the required parameter 'emailCampaignId' is set
        if ($emailCampaignId === null || (is_array($emailCampaignId) && count($emailCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emailCampaignId when calling updateEmailCampaign'
            );
        }

        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling updateEmailCampaign'
            );
        }

        // verify the required parameter 'updateCampaignRequest' is set
        if ($updateCampaignRequest === null || (is_array($updateCampaignRequest) && count($updateCampaignRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateCampaignRequest when calling updateEmailCampaign'
            );
        }


        $resourcePath = '/email_campaign/{email_campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }

        // path params
        if ($emailCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_id' . '}',
                ObjectSerializer::toPathValue($emailCampaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateCampaignRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateCampaignRequest));
            } else {
                $httpBody = $updateCampaignRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
