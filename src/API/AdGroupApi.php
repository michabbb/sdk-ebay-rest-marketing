<?php
/**
 * AdGroupApi
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API
 *
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.21.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\marketing\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use macropage\SDKs\ebay\rest\marketing\ApiException;
use macropage\SDKs\ebay\rest\marketing\Configuration;
use macropage\SDKs\ebay\rest\marketing\HeaderSelector;
use macropage\SDKs\ebay\rest\marketing\ObjectSerializer;

/**
 * AdGroupApi Class Doc Comment
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdGroupApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAdGroup' => [
            'application/json',
        ],
        'getAdGroup' => [
            'application/json',
        ],
        'getAdGroups' => [
            'application/json',
        ],
        'suggestBids' => [
            'application/json',
        ],
        'suggestKeywords' => [
            'application/json',
        ],
        'updateAdGroup' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAdGroup
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign to associate with the ad group being created.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateAdGroupRequest $createAdGroupRequest This type defines the fields for the &lt;b&gt;createAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdGroup'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createAdGroup($campaignId, $contentType, $createAdGroupRequest, string $contentType = self::contentTypes['createAdGroup'][0])
    {
        list($response) = $this->createAdGroupWithHttpInfo($campaignId, $contentType, $createAdGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation createAdGroupWithHttpInfo
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign to associate with the ad group being created.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateAdGroupRequest $createAdGroupRequest This type defines the fields for the &lt;b&gt;createAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdGroup'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdGroupWithHttpInfo($campaignId, $contentType, $createAdGroupRequest, string $contentType = self::contentTypes['createAdGroup'][0])
    {
        $request = $this->createAdGroupRequest($campaignId, $contentType, $createAdGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdGroupAsync
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign to associate with the ad group being created.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateAdGroupRequest $createAdGroupRequest This type defines the fields for the &lt;b&gt;createAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdGroupAsync($campaignId, $contentType, $createAdGroupRequest, string $contentType = self::contentTypes['createAdGroup'][0])
    {
        return $this->createAdGroupAsyncWithHttpInfo($campaignId, $contentType, $createAdGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdGroupAsyncWithHttpInfo
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign to associate with the ad group being created.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateAdGroupRequest $createAdGroupRequest This type defines the fields for the &lt;b&gt;createAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdGroupAsyncWithHttpInfo($campaignId, $contentType, $createAdGroupRequest, string $contentType = self::contentTypes['createAdGroup'][0])
    {
        $returnType = 'object';
        $request = $this->createAdGroupRequest($campaignId, $contentType, $createAdGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdGroup'
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign to associate with the ad group being created.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\CreateAdGroupRequest $createAdGroupRequest This type defines the fields for the &lt;b&gt;createAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAdGroupRequest($campaignId, $contentType, $createAdGroupRequest, string $contentType = self::contentTypes['createAdGroup'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling createAdGroup'
            );
        }

        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling createAdGroup'
            );
        }

        // verify the required parameter 'createAdGroupRequest' is set
        if ($createAdGroupRequest === null || (is_array($createAdGroupRequest) && count($createAdGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createAdGroupRequest when calling createAdGroup'
            );
        }


        $resourcePath = '/ad_campaign/{campaign_id}/ad_group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }

        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createAdGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createAdGroupRequest));
            } else {
                $httpBody = $createAdGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdGroup
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroup'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\AdGroup
     */
    public function getAdGroup($adGroupId, $campaignId, string $contentType = self::contentTypes['getAdGroup'][0])
    {
        list($response) = $this->getAdGroupWithHttpInfo($adGroupId, $campaignId, $contentType);
        return $response;
    }

    /**
     * Operation getAdGroupWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroup'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\AdGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdGroupWithHttpInfo($adGroupId, $campaignId, string $contentType = self::contentTypes['getAdGroup'][0])
    {
        $request = $this->getAdGroupRequest($adGroupId, $campaignId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\AdGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\AdGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\AdGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\AdGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\AdGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdGroupAsync
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupAsync($adGroupId, $campaignId, string $contentType = self::contentTypes['getAdGroup'][0])
    {
        return $this->getAdGroupAsyncWithHttpInfo($adGroupId, $campaignId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdGroupAsyncWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupAsyncWithHttpInfo($adGroupId, $campaignId, string $contentType = self::contentTypes['getAdGroup'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\AdGroup';
        $request = $this->getAdGroupRequest($adGroupId, $campaignId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdGroup'
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad group being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdGroupRequest($adGroupId, $campaignId, string $contentType = self::contentTypes['getAdGroup'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling getAdGroup'
            );
        }

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling getAdGroup'
            );
        }


        $resourcePath = '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad_group_id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }
        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdGroups
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad groups being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $adGroupStatus A comma-separated list of ad group statuses. The results will be filtered to only include the given statuses of the ad group.&lt;br&gt;&lt;br&gt; See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:AdGroupStatusEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AdGroupStatusEnum&lt;/a&gt; for supported values. (optional)
     * @param  string $limit The number of results, from the current result set, to be returned in a single page. (optional)
     * @param  string $offset The number of results that will be skipped in the result set. This is used with the &lt;b&gt;limit&lt;/b&gt; field to control the pagination of the output.&lt;br /&gt;&lt;br /&gt;For example, if the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;0&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 1 through 10 from the list of items returned. If the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 11 through 20 from the list of items returned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;0&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroups'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse
     */
    public function getAdGroups($campaignId, $adGroupStatus = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdGroups'][0])
    {
        list($response) = $this->getAdGroupsWithHttpInfo($campaignId, $adGroupStatus, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getAdGroupsWithHttpInfo
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad groups being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $adGroupStatus A comma-separated list of ad group statuses. The results will be filtered to only include the given statuses of the ad group.&lt;br&gt;&lt;br&gt; See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:AdGroupStatusEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AdGroupStatusEnum&lt;/a&gt; for supported values. (optional)
     * @param  string $limit The number of results, from the current result set, to be returned in a single page. (optional)
     * @param  string $offset The number of results that will be skipped in the result set. This is used with the &lt;b&gt;limit&lt;/b&gt; field to control the pagination of the output.&lt;br /&gt;&lt;br /&gt;For example, if the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;0&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 1 through 10 from the list of items returned. If the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 11 through 20 from the list of items returned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;0&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroups'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdGroupsWithHttpInfo($campaignId, $adGroupStatus = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdGroups'][0])
    {
        $request = $this->getAdGroupsRequest($campaignId, $adGroupStatus, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdGroupsAsync
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad groups being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $adGroupStatus A comma-separated list of ad group statuses. The results will be filtered to only include the given statuses of the ad group.&lt;br&gt;&lt;br&gt; See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:AdGroupStatusEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AdGroupStatusEnum&lt;/a&gt; for supported values. (optional)
     * @param  string $limit The number of results, from the current result set, to be returned in a single page. (optional)
     * @param  string $offset The number of results that will be skipped in the result set. This is used with the &lt;b&gt;limit&lt;/b&gt; field to control the pagination of the output.&lt;br /&gt;&lt;br /&gt;For example, if the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;0&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 1 through 10 from the list of items returned. If the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 11 through 20 from the list of items returned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;0&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupsAsync($campaignId, $adGroupStatus = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdGroups'][0])
    {
        return $this->getAdGroupsAsyncWithHttpInfo($campaignId, $adGroupStatus, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdGroupsAsyncWithHttpInfo
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad groups being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $adGroupStatus A comma-separated list of ad group statuses. The results will be filtered to only include the given statuses of the ad group.&lt;br&gt;&lt;br&gt; See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:AdGroupStatusEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AdGroupStatusEnum&lt;/a&gt; for supported values. (optional)
     * @param  string $limit The number of results, from the current result set, to be returned in a single page. (optional)
     * @param  string $offset The number of results that will be skipped in the result set. This is used with the &lt;b&gt;limit&lt;/b&gt; field to control the pagination of the output.&lt;br /&gt;&lt;br /&gt;For example, if the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;0&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 1 through 10 from the list of items returned. If the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 11 through 20 from the list of items returned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;0&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupsAsyncWithHttpInfo($campaignId, $adGroupStatus = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdGroups'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\AdGroupPagedCollectionResponse';
        $request = $this->getAdGroupsRequest($campaignId, $adGroupStatus, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdGroups'
     *
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the ad groups being retrieved.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $adGroupStatus A comma-separated list of ad group statuses. The results will be filtered to only include the given statuses of the ad group.&lt;br&gt;&lt;br&gt; See &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/types/pls:AdGroupStatusEnum\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AdGroupStatusEnum&lt;/a&gt; for supported values. (optional)
     * @param  string $limit The number of results, from the current result set, to be returned in a single page. (optional)
     * @param  string $offset The number of results that will be skipped in the result set. This is used with the &lt;b&gt;limit&lt;/b&gt; field to control the pagination of the output.&lt;br /&gt;&lt;br /&gt;For example, if the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;0&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 1 through 10 from the list of items returned. If the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 11 through 20 from the list of items returned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default&lt;/b&gt;: &lt;code&gt;0&lt;/code&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdGroupsRequest($campaignId, $adGroupStatus = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdGroups'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling getAdGroups'
            );
        }





        $resourcePath = '/ad_campaign/{campaign_id}/ad_group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $adGroupStatus,
            'ad_group_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suggestBids
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group containing the keywords for which the bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the keywords for which bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedBidRequest $targetedBidRequest The data requested to retrieve the suggested bids. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestBids'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection
     */
    public function suggestBids($adGroupId, $campaignId, $contentType, $targetedBidRequest, string $contentType = self::contentTypes['suggestBids'][0])
    {
        list($response) = $this->suggestBidsWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedBidRequest, $contentType);
        return $response;
    }

    /**
     * Operation suggestBidsWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group containing the keywords for which the bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the keywords for which bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedBidRequest $targetedBidRequest The data requested to retrieve the suggested bids. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestBids'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function suggestBidsWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedBidRequest, string $contentType = self::contentTypes['suggestBids'][0])
    {
        $request = $this->suggestBidsRequest($adGroupId, $campaignId, $contentType, $targetedBidRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suggestBidsAsync
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group containing the keywords for which the bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the keywords for which bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedBidRequest $targetedBidRequest The data requested to retrieve the suggested bids. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestBids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suggestBidsAsync($adGroupId, $campaignId, $contentType, $targetedBidRequest, string $contentType = self::contentTypes['suggestBids'][0])
    {
        return $this->suggestBidsAsyncWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedBidRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suggestBidsAsyncWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group containing the keywords for which the bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the keywords for which bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedBidRequest $targetedBidRequest The data requested to retrieve the suggested bids. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestBids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suggestBidsAsyncWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedBidRequest, string $contentType = self::contentTypes['suggestBids'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\TargetedBidsPagedCollection';
        $request = $this->suggestBidsRequest($adGroupId, $campaignId, $contentType, $targetedBidRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suggestBids'
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group containing the keywords for which the bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign associated with the keywords for which bid suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedBidRequest $targetedBidRequest The data requested to retrieve the suggested bids. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestBids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function suggestBidsRequest($adGroupId, $campaignId, $contentType, $targetedBidRequest, string $contentType = self::contentTypes['suggestBids'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling suggestBids'
            );
        }

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling suggestBids'
            );
        }

        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling suggestBids'
            );
        }

        // verify the required parameter 'targetedBidRequest' is set
        if ($targetedBidRequest === null || (is_array($targetedBidRequest) && count($targetedBidRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetedBidRequest when calling suggestBids'
            );
        }


        $resourcePath = '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}/suggest_bids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }

        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad_group_id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }
        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($targetedBidRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($targetedBidRequest));
            } else {
                $httpBody = $targetedBidRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suggestKeywords
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group for which the keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordRequest $targetedKeywordRequest The required data to retrieve suggested keywords. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestKeywords'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection
     */
    public function suggestKeywords($adGroupId, $campaignId, $contentType, $targetedKeywordRequest = null, string $contentType = self::contentTypes['suggestKeywords'][0])
    {
        list($response) = $this->suggestKeywordsWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedKeywordRequest, $contentType);
        return $response;
    }

    /**
     * Operation suggestKeywordsWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group for which the keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordRequest $targetedKeywordRequest The required data to retrieve suggested keywords. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestKeywords'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function suggestKeywordsWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedKeywordRequest = null, string $contentType = self::contentTypes['suggestKeywords'][0])
    {
        $request = $this->suggestKeywordsRequest($adGroupId, $campaignId, $contentType, $targetedKeywordRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suggestKeywordsAsync
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group for which the keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordRequest $targetedKeywordRequest The required data to retrieve suggested keywords. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suggestKeywordsAsync($adGroupId, $campaignId, $contentType, $targetedKeywordRequest = null, string $contentType = self::contentTypes['suggestKeywords'][0])
    {
        return $this->suggestKeywordsAsyncWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedKeywordRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suggestKeywordsAsyncWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group for which the keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordRequest $targetedKeywordRequest The required data to retrieve suggested keywords. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suggestKeywordsAsyncWithHttpInfo($adGroupId, $campaignId, $contentType, $targetedKeywordRequest = null, string $contentType = self::contentTypes['suggestKeywords'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordsPagedCollection';
        $request = $this->suggestKeywordsRequest($adGroupId, $campaignId, $contentType, $targetedKeywordRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suggestKeywords'
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group for which the keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which keyword suggestions will be provided.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\TargetedKeywordRequest $targetedKeywordRequest The required data to retrieve suggested keywords. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['suggestKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function suggestKeywordsRequest($adGroupId, $campaignId, $contentType, $targetedKeywordRequest = null, string $contentType = self::contentTypes['suggestKeywords'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling suggestKeywords'
            );
        }

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling suggestKeywords'
            );
        }

        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling suggestKeywords'
            );
        }



        $resourcePath = '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}/suggest_keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }

        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad_group_id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }
        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($targetedKeywordRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($targetedKeywordRequest));
            } else {
                $httpBody = $targetedKeywordRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAdGroup
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group that is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which the ad group is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateAdGroupRequest $updateAdGroupRequest This type defines the fields for the &lt;b&gt;UpdateAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroup'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAdGroup($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, string $contentType = self::contentTypes['updateAdGroup'][0])
    {
        $this->updateAdGroupWithHttpInfo($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, $contentType);
    }

    /**
     * Operation updateAdGroupWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group that is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which the ad group is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateAdGroupRequest $updateAdGroupRequest This type defines the fields for the &lt;b&gt;UpdateAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroup'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\marketing\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdGroupWithHttpInfo($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, string $contentType = self::contentTypes['updateAdGroup'][0])
    {
        $request = $this->updateAdGroupRequest($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdGroupAsync
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group that is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which the ad group is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateAdGroupRequest $updateAdGroupRequest This type defines the fields for the &lt;b&gt;UpdateAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdGroupAsync($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, string $contentType = self::contentTypes['updateAdGroup'][0])
    {
        return $this->updateAdGroupAsyncWithHttpInfo($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdGroupAsyncWithHttpInfo
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group that is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which the ad group is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateAdGroupRequest $updateAdGroupRequest This type defines the fields for the &lt;b&gt;UpdateAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdGroupAsyncWithHttpInfo($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, string $contentType = self::contentTypes['updateAdGroup'][0])
    {
        $returnType = '';
        $request = $this->updateAdGroupRequest($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAdGroup'
     *
     * @param  string $adGroupId This path parameter specifies the unique identifier of the ad group that is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_group/methods/getAdGroups\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve ad group IDs. (required)
     * @param  string $campaignId This path parameter specifies the unique eBay-assigned identifier of the ad campaign for which the ad group is being updated.&lt;br&gt;&lt;br&gt; Use the &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCampaigns&lt;/a&gt; method to retrieve campaign IDs. (required)
     * @param  string $contentType This header indicates the format of the request body provided by the client. Its value should be set to &lt;b&gt;application/json&lt;/b&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (required)
     * @param  \macropage\SDKs\ebay\rest\marketing\Model\UpdateAdGroupRequest $updateAdGroupRequest This type defines the fields for the &lt;b&gt;UpdateAdGroup&lt;/b&gt; request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAdGroupRequest($adGroupId, $campaignId, $contentType, $updateAdGroupRequest, string $contentType = self::contentTypes['updateAdGroup'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling updateAdGroup'
            );
        }

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling updateAdGroup'
            );
        }

        // verify the required parameter 'contentType' is set
        if ($contentType === null || (is_array($contentType) && count($contentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling updateAdGroup'
            );
        }

        // verify the required parameter 'updateAdGroupRequest' is set
        if ($updateAdGroupRequest === null || (is_array($updateAdGroupRequest) && count($updateAdGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateAdGroupRequest when calling updateAdGroup'
            );
        }


        $resourcePath = '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }

        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad_group_id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }
        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateAdGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateAdGroupRequest));
            } else {
                $httpBody = $updateAdGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
