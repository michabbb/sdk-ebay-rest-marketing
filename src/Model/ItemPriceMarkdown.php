<?php
/**
 * ItemPriceMarkdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API
 *
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.22.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\marketing\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\marketing\ObjectSerializer;

/**
 * ItemPriceMarkdown Class Doc Comment
 *
 * @category Class
 * @description This type defines the fields used to describe an item price markdown discount.
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemPriceMarkdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemPriceMarkdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'applyFreeShipping' => 'bool',
        'autoSelectFutureInventory' => 'bool',
        'blockPriceIncreaseInItemRevision' => 'bool',
        'description' => 'string',
        'endDate' => 'string',
        'marketplaceId' => 'string',
        'name' => 'string',
        'priority' => 'string',
        'promotionImageUrl' => 'string',
        'promotionStatus' => 'string',
        'selectedInventoryDiscounts' => '\macropage\SDKs\ebay\rest\marketing\Model\SelectedInventoryDiscount[]',
        'startDate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'applyFreeShipping' => null,
        'autoSelectFutureInventory' => null,
        'blockPriceIncreaseInItemRevision' => null,
        'description' => null,
        'endDate' => null,
        'marketplaceId' => null,
        'name' => null,
        'priority' => null,
        'promotionImageUrl' => null,
        'promotionStatus' => null,
        'selectedInventoryDiscounts' => null,
        'startDate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'applyFreeShipping' => false,
        'autoSelectFutureInventory' => false,
        'blockPriceIncreaseInItemRevision' => false,
        'description' => false,
        'endDate' => false,
        'marketplaceId' => false,
        'name' => false,
        'priority' => false,
        'promotionImageUrl' => false,
        'promotionStatus' => false,
        'selectedInventoryDiscounts' => false,
        'startDate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applyFreeShipping' => 'applyFreeShipping',
        'autoSelectFutureInventory' => 'autoSelectFutureInventory',
        'blockPriceIncreaseInItemRevision' => 'blockPriceIncreaseInItemRevision',
        'description' => 'description',
        'endDate' => 'endDate',
        'marketplaceId' => 'marketplaceId',
        'name' => 'name',
        'priority' => 'priority',
        'promotionImageUrl' => 'promotionImageUrl',
        'promotionStatus' => 'promotionStatus',
        'selectedInventoryDiscounts' => 'selectedInventoryDiscounts',
        'startDate' => 'startDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applyFreeShipping' => 'setApplyFreeShipping',
        'autoSelectFutureInventory' => 'setAutoSelectFutureInventory',
        'blockPriceIncreaseInItemRevision' => 'setBlockPriceIncreaseInItemRevision',
        'description' => 'setDescription',
        'endDate' => 'setEndDate',
        'marketplaceId' => 'setMarketplaceId',
        'name' => 'setName',
        'priority' => 'setPriority',
        'promotionImageUrl' => 'setPromotionImageUrl',
        'promotionStatus' => 'setPromotionStatus',
        'selectedInventoryDiscounts' => 'setSelectedInventoryDiscounts',
        'startDate' => 'setStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applyFreeShipping' => 'getApplyFreeShipping',
        'autoSelectFutureInventory' => 'getAutoSelectFutureInventory',
        'blockPriceIncreaseInItemRevision' => 'getBlockPriceIncreaseInItemRevision',
        'description' => 'getDescription',
        'endDate' => 'getEndDate',
        'marketplaceId' => 'getMarketplaceId',
        'name' => 'getName',
        'priority' => 'getPriority',
        'promotionImageUrl' => 'getPromotionImageUrl',
        'promotionStatus' => 'getPromotionStatus',
        'selectedInventoryDiscounts' => 'getSelectedInventoryDiscounts',
        'startDate' => 'getStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('applyFreeShipping', $data ?? [], null);
        $this->setIfExists('autoSelectFutureInventory', $data ?? [], null);
        $this->setIfExists('blockPriceIncreaseInItemRevision', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('marketplaceId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('promotionImageUrl', $data ?? [], null);
        $this->setIfExists('promotionStatus', $data ?? [], null);
        $this->setIfExists('selectedInventoryDiscounts', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applyFreeShipping
     *
     * @return bool|null
     */
    public function getApplyFreeShipping()
    {
        return $this->container['applyFreeShipping'];
    }

    /**
     * Sets applyFreeShipping
     *
     * @param bool|null $applyFreeShipping If set to <code>true</code>, free shipping is applied to the first shipping service specified for the item. The first domestic shipping option is set to \"free shipping,\" regardless if the shipping <b>optionType</b> for that service is set to <code>FLAT_RATE</code>, <code>CALCULATED</code>, or <code>NOT_SPECIFIED</code> (freight). This flag essentially adds free shipping as a part of the discount. <br><br><b>Default:</b> <code>false</code>
     *
     * @return self
     */
    public function setApplyFreeShipping($applyFreeShipping)
    {
        if (is_null($applyFreeShipping)) {
            throw new \InvalidArgumentException('non-nullable applyFreeShipping cannot be null');
        }
        $this->container['applyFreeShipping'] = $applyFreeShipping;

        return $this;
    }

    /**
     * Gets autoSelectFutureInventory
     *
     * @return bool|null
     */
    public function getAutoSelectFutureInventory()
    {
        return $this->container['autoSelectFutureInventory'];
    }

    /**
     * Sets autoSelectFutureInventory
     *
     * @param bool|null $autoSelectFutureInventory If set to <code>true</code>, eBay will automatically add inventory items to the markdown discount if they meet the <b>selectedInventoryDiscounts</b> criteria specified for the markdown discount.  <br><br><b>Default:</b> <code>false</code>
     *
     * @return self
     */
    public function setAutoSelectFutureInventory($autoSelectFutureInventory)
    {
        if (is_null($autoSelectFutureInventory)) {
            throw new \InvalidArgumentException('non-nullable autoSelectFutureInventory cannot be null');
        }
        $this->container['autoSelectFutureInventory'] = $autoSelectFutureInventory;

        return $this;
    }

    /**
     * Gets blockPriceIncreaseInItemRevision
     *
     * @return bool|null
     */
    public function getBlockPriceIncreaseInItemRevision()
    {
        return $this->container['blockPriceIncreaseInItemRevision'];
    }

    /**
     * Sets blockPriceIncreaseInItemRevision
     *
     * @param bool|null $blockPriceIncreaseInItemRevision If set to <code>true</code>, price increases (including removing the free shipping flag) are blocked and an error message is returned if a seller attempts to adjust the price of an item that's partaking in this markdown discount. If set to <code>false</code>, an item is dropped from the markdown discount if the seller adjusts the price.  <br><br><b>Default:</b> <code>false</code>
     *
     * @return self
     */
    public function setBlockPriceIncreaseInItemRevision($blockPriceIncreaseInItemRevision)
    {
        if (is_null($blockPriceIncreaseInItemRevision)) {
            throw new \InvalidArgumentException('non-nullable blockPriceIncreaseInItemRevision cannot be null');
        }
        $this->container['blockPriceIncreaseInItemRevision'] = $blockPriceIncreaseInItemRevision;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description This field is required if you are configuring an MARKDOWN_SALE discount. <br><br>This is the seller-defined \"tag line\" for the offer, such as \"Save on designer shoes.\" A tag line appears under the \"offer-type text\" that is generated for the discount. The text is displayed on the offer tile that is shown on the seller's <b>All Offers</b> page and on the event page for the discount.  <p class=\"tablenote\"><b>Note:</b> Offer-type text is a teaser that's presented throughout the buyer's journey through the sales flow and is generated by eBay. This text is not editable by the seller&mdash;it's derived from the settings in the <b>discountRules</b> and <b>discountSpecification</b> fields&mdash;and can be, for example, \"20% off\".</p>  <br><b>Maximum length:</b> 50
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string|null $endDate The date and time the discount ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). The value supplied for <b>endDate</b> must be at least 24 hours after the value supplied for the <b>startDate</b> of the markdown discount.<br><br>For display purposes, convert this time into the local time of the seller.  <br><br><b>Max value:</b><ul><li><code>14</code> days for the AT, CH, DE, ES, FR, IE, IT, and UK, marketplaces.</li>  <li><code>45</code> days for all other marketplaces.</li></ul>
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        if (is_null($endDate)) {
            throw new \InvalidArgumentException('non-nullable endDate cannot be null');
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The eBay marketplace ID of the site where the markdown discount is hosted. Markdown discounts are supported on all eBay marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId)
    {
        if (is_null($marketplaceId)) {
            throw new \InvalidArgumentException('non-nullable marketplaceId cannot be null');
        }
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The seller-defined name or 'title' of the discount that the seller can use to identify a discount. This label is not displayed in end-user flows.  <br><br><b>Maximum length:</b> 90
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority This field is ignored in markdown discounts. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets promotionImageUrl
     *
     * @return string|null
     */
    public function getPromotionImageUrl()
    {
        return $this->container['promotionImageUrl'];
    }

    /**
     * Sets promotionImageUrl
     *
     * @param string|null $promotionImageUrl Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT discounts, populate this field with a URL that points to an image to be used with the discount. This image is displayed on the seller's <b>All Offers</b> page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.
     *
     * @return self
     */
    public function setPromotionImageUrl($promotionImageUrl)
    {
        if (is_null($promotionImageUrl)) {
            throw new \InvalidArgumentException('non-nullable promotionImageUrl cannot be null');
        }
        $this->container['promotionImageUrl'] = $promotionImageUrl;

        return $this;
    }

    /**
     * Gets promotionStatus
     *
     * @return string|null
     */
    public function getPromotionStatus()
    {
        return $this->container['promotionStatus'];
    }

    /**
     * Sets promotionStatus
     *
     * @param string|null $promotionStatus The current status of the discount. When creating a new discount, you must set this value to either <code>DRAFT</code> or <code>SCHEDULED</code>.  <br><br>Note that you must set this value to <code>SCHEDULED</code> when you update a <b>RUNNING</b> discount. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setPromotionStatus($promotionStatus)
    {
        if (is_null($promotionStatus)) {
            throw new \InvalidArgumentException('non-nullable promotionStatus cannot be null');
        }
        $this->container['promotionStatus'] = $promotionStatus;

        return $this;
    }

    /**
     * Gets selectedInventoryDiscounts
     *
     * @return \macropage\SDKs\ebay\rest\marketing\Model\SelectedInventoryDiscount[]|null
     */
    public function getSelectedInventoryDiscounts()
    {
        return $this->container['selectedInventoryDiscounts'];
    }

    /**
     * Sets selectedInventoryDiscounts
     *
     * @param \macropage\SDKs\ebay\rest\marketing\Model\SelectedInventoryDiscount[]|null $selectedInventoryDiscounts A list that defines the sets of selected items for the markdown discount.
     *
     * @return self
     */
    public function setSelectedInventoryDiscounts($selectedInventoryDiscounts)
    {
        if (is_null($selectedInventoryDiscounts)) {
            throw new \InvalidArgumentException('non-nullable selectedInventoryDiscounts cannot be null');
        }
        $this->container['selectedInventoryDiscounts'] = $selectedInventoryDiscounts;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string|null $startDate The date and time the discount starts in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.
     *
     * @return self
     */
    public function setStartDate($startDate)
    {
        if (is_null($startDate)) {
            throw new \InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


