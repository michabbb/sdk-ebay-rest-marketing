<?php
/**
 * CreateReportTask
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API
 *
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.21.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\marketing\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\marketing\ObjectSerializer;

/**
 * CreateReportTask Class Doc Comment
 *
 * @category Class
 * @description This type defines the rules that govern the generation of a report task and the criteria that&#39;s used to create the report. The report-generation rules include the starting and ending dates for the report. Report-task criteria includes the report dimensions, metrics, listings covered in the report, and so on. For information on the required and optional fields for each report type, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.
 * @package  macropage\SDKs\ebay\rest\marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateReportTask implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateReportTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additionalRecords' => 'string[]',
        'campaignIds' => 'string[]',
        'channels' => 'string[]',
        'dateFrom' => 'string',
        'dateTo' => 'string',
        'dimensions' => '\macropage\SDKs\ebay\rest\marketing\Model\Dimension[]',
        'fundingModels' => 'string[]',
        'inventoryReferences' => '\macropage\SDKs\ebay\rest\marketing\Model\InventoryReference[]',
        'listingIds' => 'string[]',
        'marketplaceId' => 'string',
        'metricKeys' => 'string[]',
        'reportFormat' => 'string',
        'reportType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additionalRecords' => null,
        'campaignIds' => null,
        'channels' => null,
        'dateFrom' => null,
        'dateTo' => null,
        'dimensions' => null,
        'fundingModels' => null,
        'inventoryReferences' => null,
        'listingIds' => null,
        'marketplaceId' => null,
        'metricKeys' => null,
        'reportFormat' => null,
        'reportType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additionalRecords' => false,
        'campaignIds' => false,
        'channels' => false,
        'dateFrom' => false,
        'dateTo' => false,
        'dimensions' => false,
        'fundingModels' => false,
        'inventoryReferences' => false,
        'listingIds' => false,
        'marketplaceId' => false,
        'metricKeys' => false,
        'reportFormat' => false,
        'reportType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalRecords' => 'additionalRecords',
        'campaignIds' => 'campaignIds',
        'channels' => 'channels',
        'dateFrom' => 'dateFrom',
        'dateTo' => 'dateTo',
        'dimensions' => 'dimensions',
        'fundingModels' => 'fundingModels',
        'inventoryReferences' => 'inventoryReferences',
        'listingIds' => 'listingIds',
        'marketplaceId' => 'marketplaceId',
        'metricKeys' => 'metricKeys',
        'reportFormat' => 'reportFormat',
        'reportType' => 'reportType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalRecords' => 'setAdditionalRecords',
        'campaignIds' => 'setCampaignIds',
        'channels' => 'setChannels',
        'dateFrom' => 'setDateFrom',
        'dateTo' => 'setDateTo',
        'dimensions' => 'setDimensions',
        'fundingModels' => 'setFundingModels',
        'inventoryReferences' => 'setInventoryReferences',
        'listingIds' => 'setListingIds',
        'marketplaceId' => 'setMarketplaceId',
        'metricKeys' => 'setMetricKeys',
        'reportFormat' => 'setReportFormat',
        'reportType' => 'setReportType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalRecords' => 'getAdditionalRecords',
        'campaignIds' => 'getCampaignIds',
        'channels' => 'getChannels',
        'dateFrom' => 'getDateFrom',
        'dateTo' => 'getDateTo',
        'dimensions' => 'getDimensions',
        'fundingModels' => 'getFundingModels',
        'inventoryReferences' => 'getInventoryReferences',
        'listingIds' => 'getListingIds',
        'marketplaceId' => 'getMarketplaceId',
        'metricKeys' => 'getMetricKeys',
        'reportFormat' => 'getReportFormat',
        'reportType' => 'getReportType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additionalRecords', $data ?? [], null);
        $this->setIfExists('campaignIds', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('dateFrom', $data ?? [], null);
        $this->setIfExists('dateTo', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('fundingModels', $data ?? [], null);
        $this->setIfExists('inventoryReferences', $data ?? [], null);
        $this->setIfExists('listingIds', $data ?? [], null);
        $this->setIfExists('marketplaceId', $data ?? [], null);
        $this->setIfExists('metricKeys', $data ?? [], null);
        $this->setIfExists('reportFormat', $data ?? [], null);
        $this->setIfExists('reportType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalRecords
     *
     * @return string[]|null
     */
    public function getAdditionalRecords()
    {
        return $this->container['additionalRecords'];
    }

    /**
     * Sets additionalRecords
     *
     * @param string[]|null $additionalRecords A list of additional records that shall be included in the report, such as non-performing data.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Additional records are only applicable to Promoted Listings Advanced (PLA) campaigns that use the Cost Per Click (CPC) funding model.</span><br /><b>Valid Value:</b> <code>NON_PERFORMING_DATA</code>
     *
     * @return self
     */
    public function setAdditionalRecords($additionalRecords)
    {
        if (is_null($additionalRecords)) {
            throw new \InvalidArgumentException('non-nullable additionalRecords cannot be null');
        }
        $this->container['additionalRecords'] = $additionalRecords;

        return $this;
    }

    /**
     * Gets campaignIds
     *
     * @return string[]|null
     */
    public function getCampaignIds()
    {
        return $this->container['campaignIds'];
    }

    /**
     * Sets campaignIds
     *
     * @param string[]|null $campaignIds A list of campaign IDs to be included in the report task. Use the <a href=\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\" target=\"_blank\">getCampaigns</a> method to retrieve a list of the current campaign IDs for a seller.<br /><br />For Promoted Listings Standard (PLS) sellers, this field is required if the <b>reportType</b> is set to <code>CAMPAIGN_PERFORMANCE_REPORT</code> or <code>CAMPAIGN_PERFORMANCE_SUMMARY_REPORT</code>.<br /><br />For Promoted Listings Advanced (PLA) sellers, leave this request field blank to retrieve the details for all campaigns associated with your account, or specify the campaign IDs for which you would like to retrieve the campaign-specific details.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> There is a maximum data limit that cannot be exceeded when generating reports. If this threshold is exceeded, the report will fail. Refer to <a href=\"/api-docs/sell/static/marketing/pl-reports.html#creation\">Promoted Listings reporting</a> in the Selling Integration Guide for details.</span><br /><br /><b>Maximum:</b> 1,000 IDs (for PLA or PLS)</li></ul>
     *
     * @return self
     */
    public function setCampaignIds($campaignIds)
    {
        if (is_null($campaignIds)) {
            throw new \InvalidArgumentException('non-nullable campaignIds cannot be null');
        }
        $this->container['campaignIds'] = $campaignIds;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels The channel for the advertising campaign that will be included in the report task. This value indicates whether the data included in the report task is for an Onsite or Offsite advertising campaign.<br><br>If no value is entered, this field will default to <code>ON_SITE</code>. Multiple channels are not supported.<br><br><span class=\"tablenote\"><b>Note:</b> Channels are only applicable for campaigns that use the Cost Per Click (CPC) funding model.</span><br><b>Valid Values</b>:<ul><li> <code>ON_SITE</code></li><li><code>OFF_SITE</code></li></ul>This field is required and must be set to <code>OFF_SITE</code> if the report is for a Offsite Ads campaign.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets dateFrom
     *
     * @return string|null
     */
    public function getDateFrom()
    {
        return $this->container['dateFrom'];
    }

    /**
     * Sets dateFrom
     *
     * @param string|null $dateFrom The date defining the start of the timespan covered by the report.<br /><br />Format the timestamp as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock with local offset.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The date specified cannot be a future date.</span><br /><br /><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code><br /><br /><b>Example:</b> <code>2021-03-15T13:00:00-07:00</code>
     *
     * @return self
     */
    public function setDateFrom($dateFrom)
    {
        if (is_null($dateFrom)) {
            throw new \InvalidArgumentException('non-nullable dateFrom cannot be null');
        }
        $this->container['dateFrom'] = $dateFrom;

        return $this;
    }

    /**
     * Gets dateTo
     *
     * @return string|null
     */
    public function getDateTo()
    {
        return $this->container['dateTo'];
    }

    /**
     * Sets dateTo
     *
     * @param string|null $dateTo The date defining the end of the timespan covered by the report.<br /><br />As with the <b>dateFrom</b> field, format the timestamp as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The date specified cannot be a future date. Additionally, the time specified must be a later time than that specified in the <b>dateFrom</b> field.</span><br /><br /><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code><br /><br /><b>Example:</b> <code>2021-03-17T13:00:00-07:00</code>
     *
     * @return self
     */
    public function setDateTo($dateTo)
    {
        if (is_null($dateTo)) {
            throw new \InvalidArgumentException('non-nullable dateTo cannot be null');
        }
        $this->container['dateTo'] = $dateTo;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \macropage\SDKs\ebay\rest\marketing\Model\Dimension[]|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \macropage\SDKs\ebay\rest\marketing\Model\Dimension[]|null $dimensions The list of the dimensions applied to the report.  <p>A dimension is an attribute to which the report data applies. For example, if you set <b>dimensionKey</b> to <code>campaign_id</code> in a Campaign Performance Report, the data will apply to the entire ad campaign. For information on the dimensions and how to specify them, see <a href=\"/api-docs/sell/static/marketing/pl-reports.html\">Promoted Listings reporting</a>.</p>
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets fundingModels
     *
     * @return string[]|null
     */
    public function getFundingModels()
    {
        return $this->container['fundingModels'];
    }

    /**
     * Sets fundingModels
     *
     * @param string[]|null $fundingModels The funding model for the campaign that shall be included in the report.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The default funding model for Promoted Listings reports is <code>COST_PER_SALE</code>.</span><br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Multiple value support for the <b>fundingModels</b> array has been deprecated. See <a href =\"/develop/apis/api-deprecation-status \">API&nbsp;Deprecation&nbsp;Status</a> for information.</span><br /><br /><b>Valid Values:</b><ul><li><code>COST_PER_SALE</code></li><li><code>COST_PER_CLICK</code></li></ul><i>Required if</i> the campaign funding model is Cost Per Click (CPC).
     *
     * @return self
     */
    public function setFundingModels($fundingModels)
    {
        if (is_null($fundingModels)) {
            throw new \InvalidArgumentException('non-nullable fundingModels cannot be null');
        }
        $this->container['fundingModels'] = $fundingModels;

        return $this;
    }

    /**
     * Gets inventoryReferences
     *
     * @return \macropage\SDKs\ebay\rest\marketing\Model\InventoryReference[]|null
     */
    public function getInventoryReferences()
    {
        return $this->container['inventoryReferences'];
    }

    /**
     * Sets inventoryReferences
     *
     * @param \macropage\SDKs\ebay\rest\marketing\Model\InventoryReference[]|null $inventoryReferences You can use this field to supply an array of items to include in the report if you manage your inventory with the <a href=\"/api-docs/sell/inventory/resources/methods\">Inventory API</a>.  <br><br>This field is mutually exclusive with the <b>listingIds</b> field; if you populate this field, <i>do not</i> populate the <b>listingIds</b> field.  <br><br>An inventory reference identifies an item in your inventory using a pair of values, where the <b>inventoryReferenceId</b> can be either a seller-defined <b>SKU</b> value or an <b>inventoryItemGroupKey</b>, where an <b>inventoryItemGroupKey</b> is seller-defined ID for an inventory item group (a multiple-variation listing). <br><br>Couple the <b>inventoryReferenceId</b> with an <b>inventoryReferenceType</b> identifier to fully identify an item in your inventory.  <br><br><b>Maximum: </b> 500 items <br><br><i>Required if </i> you do not supply an array of <b>listingId</b> values or if you set <b>reportType</b> to <code>INVENTORY_PERFORMANCE_REPORT</code>.
     *
     * @return self
     */
    public function setInventoryReferences($inventoryReferences)
    {
        if (is_null($inventoryReferences)) {
            throw new \InvalidArgumentException('non-nullable inventoryReferences cannot be null');
        }
        $this->container['inventoryReferences'] = $inventoryReferences;

        return $this;
    }

    /**
     * Gets listingIds
     *
     * @return string[]|null
     */
    public function getListingIds()
    {
        return $this->container['listingIds'];
    }

    /**
     * Sets listingIds
     *
     * @param string[]|null $listingIds Use this field to supply an array of eBay listing IDs you want to include in the report.<br><br><span class=\"tablenote\"><span style=\"color:#FF0000\"><strong>Important:</strong></span> This field is mutually exclusive with the <b>inventoryReferences</b> field; if you populate this field, <i>do not</i> populate the <b>inventoryReferences</b> field.</span><br />For Promoted Listings Standard (PLS) sellers, this field is required if you do not supply an array of <b>inventoryReferences</b> values or if you set the <b>reportType</b> to <code>LISTING_PERFORMANCE_REPORT</code>.<br /><br />For Promoted Listings Advanced (PLA) sellers, leave this field blank to retrieve the details for all listings associated with the specified campaign IDs (or all campaigns associated with your account, if no campaign IDs are specified), or specify the listing IDs for which you would like to retrieve the listing-specific details.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> There is a maximum data limit that cannot be exceeded when generating reports. If this threshold is exceeded, the report will fail. Refer to <a href=\"/api-docs/sell/static/marketing/pl-reports.html#creation\">Promoted Listings reporting</a> in the Selling Integration Guide for details.</span><br /><br /><b>Maximum:</b> 500 listings
     *
     * @return self
     */
    public function setListingIds($listingIds)
    {
        if (is_null($listingIds)) {
            throw new \InvalidArgumentException('non-nullable listingIds cannot be null');
        }
        $this->container['listingIds'] = $listingIds;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The unique identifier for the eBay marketplace on which the report is based. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId)
    {
        if (is_null($marketplaceId)) {
            throw new \InvalidArgumentException('non-nullable marketplaceId cannot be null');
        }
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets metricKeys
     *
     * @return string[]|null
     */
    public function getMetricKeys()
    {
        return $this->container['metricKeys'];
    }

    /**
     * Sets metricKeys
     *
     * @param string[]|null $metricKeys The list of metrics to be included in the report.  <p>Metrics are the quantitative measurements compiled into the report and the data returned is based on the specified dimension of the report. For example, if the dimension is <code>campaign</code>, the metrics for <b>number of sales</b> would be the number of sales in the campaign. However, if the dimension is <code>listing</code>, the <b>number of sales</b> represents the number of items sold in that listing.</p>  <p>For information on metric keys and how to set them, see <a href=\"/api-docs/sell/static/marketing/pl-reports.html\">Promoted Listings reporting</a>.</p><b>Minimum: </b> 1
     *
     * @return self
     */
    public function setMetricKeys($metricKeys)
    {
        if (is_null($metricKeys)) {
            throw new \InvalidArgumentException('non-nullable metricKeys cannot be null');
        }
        $this->container['metricKeys'] = $metricKeys;

        return $this;
    }

    /**
     * Gets reportFormat
     *
     * @return string|null
     */
    public function getReportFormat()
    {
        return $this->container['reportFormat'];
    }

    /**
     * Sets reportFormat
     *
     * @param string|null $reportFormat The file format of the report. Currently, the only supported format is <code>TSV_GZIP</code>, which is a gzip file with tab separated values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportFormatEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReportFormat($reportFormat)
    {
        if (is_null($reportFormat)) {
            throw new \InvalidArgumentException('non-nullable reportFormat cannot be null');
        }
        $this->container['reportFormat'] = $reportFormat;

        return $this;
    }

    /**
     * Gets reportType
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['reportType'];
    }

    /**
     * Sets reportType
     *
     * @param string|null $reportType The type of report to be generated, such as <code>ACCOUNT_PERFORMANCE_REPORT</code> or <code>CAMPAIGN_PERFORMANCE_REPORT</code>.<br/><br/><span class=\"tablenote\"><b>Note:</b> INVENTORY_PERFORMANCE_REPORT is not currently available; availability date is pending.</span><br /><br /><b>Maximum:</b> 1 For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportTypeEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReportType($reportType)
    {
        if (is_null($reportType)) {
            throw new \InvalidArgumentException('non-nullable reportType cannot be null');
        }
        $this->container['reportType'] = $reportType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


